{"version":3,"sources":["imgs/complete.svg","imgs/uncomplete.svg","imgs/all.svg","components/TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItem","this","props","item","onClick","destroy","title","url","imgUncomplete","isComplete","imgComplete","className","classNames","src","alt","Component","App","state","newItem","todoItems","flagSelectAll","currentFilter","filter","value","isSelected","onChange","bind","onEnter","selectAll","index","indexOf","setState","slice","event","keyCode","text","target","trim","prevState","map","ele","shownTodos","checkAll","type","placeholder","onKeyUp","onItemClicked","key","length","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.99debc08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/complete.d29f1779.svg\";","module.exports = __webpack_public_path__ + \"static/media/uncomplete.40eb9cc6.svg\";","module.exports = __webpack_public_path__ + \"static/media/all.4785ffc8.svg\";","import React, { Component } from 'react';\nimport './TodoItem.css';\nimport classNames from 'classnames';\nimport imgComplete from '../imgs/complete.svg';\nimport imgUncomplete from '../imgs/uncomplete.svg';\n\nclass TodoItem extends Component {\n  render() {\n    const { item, onClick, destroy } = this.props;\n    const { title } = item;\n    let url = imgUncomplete;\n    if (item.isComplete) {\n      url = imgComplete;\n    }\n    return (\n      <div className={classNames('TodoItem', { 'TodoItem-complete': item.isComplete })}>\n        <img onClick={onClick} src={url} alt=\"\" />\n        <p>{title}</p>\n        <span onClick={destroy}>x</span>\n      </div>\n    );\n  }\n}\n\nexport default TodoItem;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport './App.css';\nimport classNames from 'classnames';\nimport TodoItem from './components/TodoItem';\nimport checkAll from './imgs/all.svg';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      newItem: '',\n      todoItems: [],\n      flagSelectAll: true,\n      currentFilter: 'All',\n      filter: [\n        { value: 'All', isSelected: true },\n        { value: 'Active', isSelected: false },\n        { value: 'Complete', isSelected: false },\n      ],\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onEnter = this.onEnter.bind(this);\n    this.selectAll = this.selectAll.bind(this);\n    this.destroy = this.destroy.bind(this);\n  }\n\n  onItemClicked(item) {\n    return () => {\n      const { isComplete } = item;\n      const { todoItems } = this.state;\n      const index = todoItems.indexOf(item);\n      this.setState({\n        todoItems: [\n          ...todoItems.slice(0, index),\n          {\n            ...item,\n            isComplete: !isComplete,\n          },\n          ...todoItems.slice(index + 1),\n        ],\n      });\n    };\n  }\n\n  onEnter(event) {\n    if (event.keyCode === 13) {\n      let text = event.target.value;\n      const { todoItems } = this.state;\n      if (!text) {\n        return;\n      }\n\n      text = text.trim();\n      if (!text) { return; }\n      this.setState({\n        newItem: '',\n        todoItems: [\n          { title: text, isComplete: false },\n          ...todoItems,\n        ],\n      });\n    }\n  }\n\n  onChange(event) {\n    this.setState({\n      newItem: event.target.value,\n    });\n  }\n\n  selectAll() {\n    const { flagSelectAll } = this.state;\n    if (flagSelectAll) {\n      this.setState((prevState) => ({\n        todoItems: prevState.todoItems.map((item) => ({ ...item, isComplete: true })),\n        flagSelectAll: false,\n      }));\n    } else {\n      this.setState((prevState) => ({\n        todoItems: prevState.todoItems.map((item) => ({ ...item, isComplete: false })),\n        flagSelectAll: true,\n      }));\n    }\n  }\n\n  filter(item) {\n    return () => {\n      const { filter } = this.state;\n      const index = filter.indexOf(item);\n      this.setState((prevState) => ({\n        filter: prevState.filter.map((ele) => ({ ...ele, isSelected: false })),\n      }));\n      this.setState((prevState) => ({\n        filter: [\n          ...prevState.filter.slice(0, index),\n          {\n            ...item,\n            isSelected: true,\n          },\n          ...prevState.filter.slice(index + 1),\n        ],\n        currentFilter: item.value,\n      }));\n    };\n  }\n\n  destroy(item) {\n    return () => {\n      const { todoItems } = this.state;\n      this.setState({\n        todoItems: todoItems.filter((ele) => {\n          return item !== ele;\n        }),\n      });\n    };\n  }\n\n  render() {\n    const {\n      todoItems, newItem, filter, currentFilter,\n    } = this.state;\n    const shownTodos = todoItems.filter((ele) => {\n      switch (currentFilter) {\n        case 'Active':\n          return !ele.isComplete;\n        case 'Complete':\n          return ele.isComplete;\n        default:\n          return true;\n      }\n    });\n    return (\n      <div className=\"App\">\n        <div className=\"Header\">\n          <img onClick={this.selectAll} src={checkAll} alt=\"\" />\n          <input value={newItem} type=\"text\" placeholder=\"Add a new item\" onKeyUp={this.onEnter} onChange={this.onChange} />\n        </div>\n        {\n          shownTodos.map((item, index) => <TodoItem onClick={this.onItemClicked(item)} key={index} item={item} destroy={this.destroy(item)} />)\n        }\n        <div className=\"Footer\">\n          <p>\n            {todoItems.length}\n            <span> items left</span>\n          </p>\n          <div className=\"filter\">\n            {\n              filter.map((ele) => <button className={classNames('filter_btn', { 'filter_btn--selected': ele.isSelected })} onClick={this.filter(ele)}>{ele.value}</button>)\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}